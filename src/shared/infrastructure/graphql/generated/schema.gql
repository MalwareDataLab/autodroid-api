schema {
  query: Query
  mutation: Mutation
}

enum AUTH_PROVIDER {
  FIREBASE
}

input AdminDatasetUpdateSchema {
  description: String
  tags: String
}

input AdminDatasetUpdateVisibilitySchema {
  visibility: DATASET_VISIBILITY!
}

"""Cursor for pagination"""
scalar ConnectionCursor

enum DATASET_VISIBILITY {
  PRIVATE
  PUBLIC
  UNDER_REVIEW
}

type Dataset {
  created_at: DateTimeISO!
  description: String
  file: File!
  file_id: String!
  id: ID!
  tags: String
  updated_at: DateTimeISO!
  user: User!
  user_id: String!
  visibility: DATASET_VISIBILITY!
}

type DatasetPaginationConnection {
  edges: [DatasetPaginationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DatasetPaginationEdge {
  cursor: ConnectionCursor!
  node: Dataset!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

enum FILE_PROVIDER_STATUS {
  NOT_FOUND
  PENDING
  READY
}

enum FILE_TYPE {
  DATASET
}

type File {
  allow_public_access: Boolean!
  created_at: DateTimeISO!
  filename: String!
  id: ID!
  md5_hash: String!
  mime_type: MIME_TYPE!
  payload: JSON! @auth(requires: ADMIN)
  provider_path: String!
  provider_status: FILE_PROVIDER_STATUS!
  provider_verified_at: DateTimeISO
  public_url_expires_at: DateTimeISO
  size: Int!
  storage_provider: STORAGE_PROVIDER!
  type: FILE_TYPE!
  updated_at: DateTimeISO!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum MIME_TYPE {
  CSV
  JPEG
  OTHER
  PDF
  PNG
}

type Mutation {
  adminDatasetDelete(dataset_id: String!): Dataset! @auth(requires: ADMIN)
  adminDatasetUpdate(data: AdminDatasetUpdateSchema!, dataset_id: String!): Dataset! @auth(requires: ADMIN)
  adminDatasetUpdateVisibility(data: AdminDatasetUpdateVisibilitySchema!, dataset_id: String!): Dataset! @auth(requires: ADMIN)
  adminProcessorCreate(data: ProcessorSchema!): Processor! @auth(requires: ADMIN)
  adminProcessorDelete(processor_id: String!): Processor! @auth(requires: ADMIN)
  adminProcessorUpdate(data: ProcessorSchema!, processor_id: String!): Processor! @auth(requires: ADMIN)
  userDatasetCreate(data: UserDatasetCreateSchema!): Dataset!
  userDatasetDelete(dataset_id: String!): Dataset!
  userDatasetRequestPublication(dataset_id: String!): Dataset!
  userDatasetUpdate(data: UserDatasetUpdateSchema!, dataset_id: String!): Dataset!
  userSessionsClose: UserAuthProviderConn!
  userUpdateData(data: UserUpdateDataSchema!): User!
}

enum PROCESSOR_PARAM_TYPE {
  BOOLEAN
  INTEGER
  STRING
}

enum PROCESSOR_VISIBILITY {
  HIDDEN
  PUBLIC
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Processor {
  allowed_mime_types: String!
  created_at: DateTimeISO!
  description: String
  id: ID!
  image_tag: String!
  name: String!
  payload: JSON!
  tags: String
  updated_at: DateTimeISO!
  user: User!
  user_id: String!
  version: String!
  visibility: PROCESSOR_VISIBILITY!
}

type ProcessorPaginationConnection {
  edges: [ProcessorPaginationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProcessorPaginationEdge {
  cursor: ConnectionCursor!
  node: Processor!
}

input ProcessorPayloadParamSchema {
  default_value: String
  description: String!
  name: String!
  sequence: Int!
  type: PROCESSOR_PARAM_TYPE!
}

input ProcessorPayloadSchema {
  params: [ProcessorPayloadParamSchema!]!
  required_cpu_cores: Int!
  required_ram_mb: Int!
}

input ProcessorSchema {
  allowed_mime_types: String!
  description: String
  image_tag: String!
  name: String!
  payload: ProcessorPayloadSchema!
  tags: String
  version: String!
  visibility: PROCESSOR_VISIBILITY!
}

type Query {
  adminDataset(dataset_id: String!): Dataset! @auth(requires: ADMIN)
  adminDatasets(after: ConnectionCursor, before: ConnectionCursor, file_id: String, first: Int, last: Int, skip: Int, sorting: [SortingFieldSchema!], take: Int, user_id: String, visibility: DATASET_VISIBILITY): DatasetPaginationConnection! @auth(requires: ADMIN)
  adminProcessor(processor_id: String!): Processor! @auth(requires: ADMIN)
  adminProcessors(after: ConnectionCursor, before: ConnectionCursor, first: Int, last: Int, skip: Int, sorting: [SortingFieldSchema!], take: Int): ProcessorPaginationConnection! @auth(requires: ADMIN)
  session: Session!
  user: User!
  userDataset(dataset_id: String!): Dataset!
  userDatasets(after: ConnectionCursor, before: ConnectionCursor, first: Int, last: Int, skip: Int, sorting: [SortingFieldSchema!], take: Int): DatasetPaginationConnection!
  userProcessor(processor_id: String!): Processor!
  userProcessors(after: ConnectionCursor, before: ConnectionCursor, first: Int, last: Int, skip: Int, sorting: [SortingFieldSchema!], take: Int): ProcessorPaginationConnection!
}

enum SORT_ORDER {
  ASC
  DESC
}

enum STORAGE_PROVIDER {
  GOOGLE_CLOUD_STORAGE
}

type Session {
  user: User!
  user_auth_provider_conn: UserAuthProviderConn!
  user_session: UserSession!
}

input SortingFieldSchema {
  field: String!
  order: SORT_ORDER!
}

type User {
  created_at: DateTimeISO!
  email: String!
  id: ID!
  language: String
  name: String
  phone_number: String
  updated_at: DateTimeISO!
}

type UserAuthProviderConn {
  auth_provider: AUTH_PROVIDER!
  code: String!
  created_at: DateTimeISO!
  disconnected_at: DateTimeISO
  id: ID!
  payload: JSON! @auth(requires: ADMIN)
  updated_at: DateTimeISO!
  user_id: String!
}

input UserDatasetCreateSchema {
  description: String
  filename: String!
  md5_hash: String!
  mime_type: MIME_TYPE!
  size: Int!
  tags: String
}

input UserDatasetUpdateSchema {
  description: String
  tags: String
}

type UserSession {
  access_token: String!
  access_token_expires_at: DateTimeISO!
  payload: JSON! @auth(requires: ADMIN)
  refresh_token: String
  refresh_token_expires_at: DateTimeISO
  user_auth_provider_conn: UserAuthProviderConn!
  user_auth_provider_conn_id: String!
}

input UserUpdateDataSchema {
  language: String
  name: String!
  phone_number: String
}