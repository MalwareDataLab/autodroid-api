generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./metadata"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email        String  @unique
  name         String?
  phone_number String?

  language String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  auth_provider_conns        UserAuthProviderConn[]    @relation(name: "UserAuthProviderConn_User")
  datasets                   Dataset[]                 @relation(name: "Dataset_User")
  processors                 Processor[]               @relation(name: "Processor_User")
  worker_registration_tokens WorkerRegistrationToken[] @relation(name: "WorkerRegistrationToken_User")
  workers                    Worker[]                  @relation(name: "Worker_User")

  @@index([email])
  @@index([created_at, id], map: "users_pagination_idx")
  @@map("users")
}

model UserAuthProviderConn {
  id String @id @default(uuid())

  auth_provider String

  user_id String
  user    User   @relation(name: "UserAuthProviderConn_User", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  code    String
  payload Json

  disconnected_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([auth_provider, code])
  @@index([created_at, id], map: "user_auth_provider_conns_pagination_idx")
  @@map("user_auth_provider_conns")
}

model File {
  id String @id @default(uuid())

  storage_provider     String
  provider_path        String
  provider_status      String
  provider_verified_at DateTime?

  type String

  allow_public_access   Boolean
  public_url            String?
  public_url_expires_at DateTime?

  filename  String
  mime_type String
  size      Int

  md5_hash String

  payload Json

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  dataset Dataset? @relation(name: "Dataset_File")

  @@map("files")
}

model Dataset {
  id String @id @default(uuid())

  user_id String
  user    User   @relation(name: "Dataset_User", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  file_id String @unique
  file    File   @relation(name: "Dataset_File", fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  description String?
  tags        String?

  visibility String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("datasets")
}

model Processor {
  id String @id @default(uuid())

  user_id String
  user    User   @relation(name: "Processor_User", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  name    String
  version String

  image_tag String

  description String?
  tags        String?

  allowed_mime_types String

  visibility String

  payload Json

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("processors")
}

model WorkerRegistrationToken {
  id String @id @default(uuid())

  user_id String
  user    User   @relation(name: "WorkerRegistrationToken_User", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  token String @unique

  is_unlimited_usage Boolean

  activated_at DateTime?
  expires_at   DateTime?

  archived_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  workers Worker[] @relation(name: "WorkerRegistrationToken_Worker")

  @@map("worker_registration_tokens")
}

model Worker {
  id String @id @default(uuid())

  user_id String
  user    User   @relation(name: "Worker_User", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  registration_token_id String
  registration_token    WorkerRegistrationToken @relation(name: "WorkerRegistrationToken_Worker", fields: [registration_token_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  refresh_token String

  payload Json

  archived_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("workers")
}
